"""
Generate a grid of plots given raw data generated by pybench 
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import Grid

import os
import sys
from collections import defaultdict
from ast import literal_eval

filename = "FiredrakeFormsCoffee.dat"
names = ['plain', 'ffc-quadrature', 'ffc-tensor', 'ffc-auto', 'uflacs', 'coffee-O1', 'coffee-O4']

plt.style.use('ggplot')

if len(sys.argv) != 3:
    print "Usage: directory-of-FiredrakeFormsCoffee.dat problem-name"
    sys.exit(0)

with open(os.path.join(sys.argv[1], filename), "r") as f:
    timings = literal_eval(f.read())['timings']

# First, adjust times in a dictionary as I need
_timings = defaultdict(dict)
for info, vals in sorted(timings.items()):
    q, p, name, opt = info
    if p != q:
        # The point is to have only plots when q=p
        continue
    vals.pop('total')
    for nf, time in vals.items():
        _timings[(nf, q)][opt] = time
    
# How many subplots am I going to display ?
if sys.argv[2] in ['mass', 'helmholtz', 'poisson', 'elasticity']:
    nsubplots = (4, 4)
elif sys.argv[2] == 'hyperelasticity':
    nsubplots = (2, 4)
else:
    raise RuntimeError("Invalid problem name")

fig = plt.figure()
grid = Grid(fig, rect=111, nrows_ncols=nsubplots, axes_pad=0.25, label_mode='L')
for ax, ((nf, q), vals) in zip(grid, sorted(_timings.items())):

    _nf = int(nf[3:])

    plain = vals['plain']
    ffc_quad = vals['ffc-quadrature']
    ffc_tens = vals['ffc-tensor']
    ffc_auto = vals['ffc-auto']
    uflacs = vals['uflacs']
    coffee_O1 = vals['coffee-O1']
    coffee_O4 = vals['coffee-O4']

    # Plot parameters
    # We are going to show the speedup of /ffc_quad/, /ffc_tens/, /ffc_auto/, /uflacs/,
    # /coffee_O1/, /coffee_O4/ over /plain/, so N = 6
    N = 6
    # the x locations for the groups
    ind = np.arange(N)
    # the width of the bars
    width = 0.30
    # the font size
    fontsize = 12

    # Plot
    tick_names = ('quad', 'tens', 'auto', 'ufls', 'cfO1', 'cfO2')
    ax.set_title('q = %d' % q, fontsize=fontsize)
    ax.set_ylabel('nf = %d' % _nf, fontsize=fontsize, color='black')
    ax.set_xticklabels(tick_names, fontsize=fontsize-5.5)
    ax.grid(axis='x')
    ax.axhline(y=1, color='black', linestyle='--', linewidth=0.75)
    if _nf > 0:
       ax.title.set_visible(False)

    # Shortcuts
    p = plain

    # Compute speed ups
    speedups = (p/ffc_quad, p/ffc_tens, p/ffc_auto, p/uflacs, p/coffee_O1, p/coffee_O4)
    speedups = tuple(float(i) for i in speedups)
    # Draw the bars
    bars = ax.bar(ind, speedups, width)
    # Plot refinement
    ax.set_xticks(ind + width/2)

# Finally, we're ready to plot !
legend_place = (-1.62, -1.20, 0.95, 1)
#plt.legend((bars,), tick_names, bbox_to_anchor=legend_place, fancybox=True, ncol=6, prop={'size':6})
plt.show()
