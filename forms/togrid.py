"""
Generate a grid of plots given raw data generated by pybench 
"""
import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import Grid

import os
import sys
from collections import defaultdict
from ast import literal_eval

filename = "FiredrakeFormsCoffee.dat"

plt.style.use('ggplot')

if len(sys.argv) != 3:
    print "Usage: directory-of-FiredrakeFormsCoffee.dat problem-name"
    sys.exit(0)

with open(os.path.join(sys.argv[1], filename), "r") as f:
    timings = literal_eval(f.read())['timings']

# First, adjust times in a dictionary as I need
_timings = defaultdict(dict)
for info, vals in sorted(timings.items()):
    q, p, name, opt = info
    _timings[(q, p)][opt] = vals
    
fig = plt.figure()
grid = Grid(fig, rect=111, nrows_ncols=(4, 4), axes_pad=0.25, label_mode='L')
for ax, ((q, p), vals) in zip(grid, sorted(_timings.items())):

    names = ['plain', 'ffc-quadrature', 'ffc-tensor', 'ffc-auto', 'uflacs', 'coffee-O1', 'coffee-O4']

    plain = vals['plain']
    ffc_quad = vals['ffc-quadrature']
    ffc_tens = vals['ffc-tensor']
    ffc_auto = vals['ffc-auto']
    uflacs = vals['uflacs']
    coffee_O1 = vals['coffee-O1']
    coffee_O4 = vals['coffee-O4']

    # Plot parameters
    # We are going to show the speedup of /ffc_quad/, /ffc_tens/, /ffc_auto/, /uflacs/,
    # /coffee_O1/, /coffee_O4/ over /plain/, so N = 6
    N = 6
    # the x locations for the groups
    ind = np.arange(N)
    # the width of the bars
    width = 0.15
    # the font size
    fontsize = 12

    # Plot
    ax.set_title('p = %d' % p, fontsize=fontsize)
    ax.set_ylabel('q = %d' % q, fontsize=fontsize, color='black')
    ax.set_xticklabels(('quad', 'tens', 'auto', 'ufls', 'cfO1', 'cfO2'), fontsize=fontsize-4)
    ax.grid(axis='x')
    ax.axhline(y=1, color='black', linestyle='--', linewidth=0.75)
    if q > 1:
       ax.title.set_visible(False)

    # Shortcuts
    z = plain

    if sys.argv[2] in ['mass', 'helmholtz', 'poisson', 'elasticity']:
        nf_names = ['nf 0', 'nf 1', 'nf 2', 'nf 3']
        # Compute speed ups
        nf0 = (z['nf 0']/ffc_quad['nf 0'], z['nf 0']/ffc_tens['nf 0'], z['nf 0']/ffc_auto['nf 0'],
               z['nf 0']/uflacs['nf 0'], z['nf 0']/coffee_O1['nf 0'], z['nf 0']/coffee_O4['nf 0'])
        nf1 = (z['nf 1']/ffc_quad['nf 1'], z['nf 1']/ffc_tens['nf 1'], z['nf 1']/ffc_auto['nf 1'],
               z['nf 1']/uflacs['nf 1'], z['nf 1']/coffee_O1['nf 1'], z['nf 1']/coffee_O4['nf 1'])
        nf2 = (z['nf 2']/ffc_quad['nf 2'], z['nf 2']/ffc_tens['nf 2'], z['nf 2']/ffc_auto['nf 2'],
               z['nf 2']/uflacs['nf 2'], z['nf 2']/coffee_O1['nf 2'], z['nf 2']/coffee_O4['nf 2'])
        nf3 = (z['nf 3']/ffc_quad['nf 3'], z['nf 3']/ffc_tens['nf 3'], z['nf 3']/ffc_auto['nf 3'],
               z['nf 3']/uflacs['nf 3'], z['nf 3']/coffee_O1['nf 3'], z['nf 3']/coffee_O4['nf 3'])
        # Draw the bars
        nf0_bars = ax.bar(ind, nf0, width)
        nf1_bars = ax.bar(ind+width, nf1, width, color=plt.rcParams['axes.color_cycle'][2])
        nf2_bars = ax.bar(ind+2*width, nf2, width, color=plt.rcParams['axes.color_cycle'][3])
        nf3_bars = ax.bar(ind+3*width, nf3, width, color=plt.rcParams['axes.color_cycle'][4])
        nf_bars = (nf0_bars, nf1_bars, nf2_bars, nf3_bars)
        # Plot refinement
        ax.set_xticks(ind+2*width)
        # Legend place
        legend_place = (-1.62, -1.20, 0.95, 1)
    elif sys.argv[2] in ['hyperelasticity']:
        nf_names = ['nf 0', 'nf 1']
        # Compute speed ups
        nf0 = (z['nf 0']/ffc_quad['nf 0'], z['nf 0']/ffc_tens['nf 0'], z['nf 0']/ffc_auto['nf 0'],
               z['nf 0']/uflacs['nf 0'], z['nf 0']/coffee_O1['nf 0'], z['nf 0']/coffee_O4['nf 0'])
        nf1 = (z['nf 1']/ffc_quad['nf 1'], z['nf 1']/ffc_tens['nf 1'], z['nf 1']/ffc_auto['nf 1'],
               z['nf 1']/uflacs['nf 1'], z['nf 1']/coffee_O1['nf 1'], z['nf 1']/coffee_O4['nf 1'])
        # Draw the bars
        nf0_bars = ax.bar(ind, nf0, width)
        nf1_bars = ax.bar(ind+width, nf1, width, color=plt.rcParams['axes.color_cycle'][2])
        nf_bars = (nf0_bars, nf1_bars)
        # Plot refinement
        ax.set_xticks(ind+width)
        # Legend place
        legend_place = (-1.92, -1.20, 0.95, 1)
    else:
        print "Unrecognized problem name, exiting..."
        sys.exit(0)

# Finally, we're ready to plot !
plt.legend(nf_bars, nf_names, bbox_to_anchor=legend_place, fancybox=True, ncol=6, prop={'size':6})
plt.tight_layout()
plt.show()
